#!/usr/bin/perl
#########################################################################
# Copyright (C) 2019 Claus Schrammel <claus@f05fk.net>                  #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program.  If not, see <http://www.gnu.org/licenses/>. #
#                                                                       #
# SPDX-License-Identifier: GPL-3.0+                                     #
#########################################################################

use utf8;
use strict;
use warnings;

use JSON;
use LWP::UserAgent;

# autoflush
$|=1;

# custom HTTP User Agent
my $userAgent = LWP::UserAgent->new();
$userAgent->agent("TVthekDL/1.0");

my $quality = "Q8C"; # Q1A low; Q4A average; Q6A high; Q8C very high
my $mode = "separate"; # whole = whole playlist in one video; separate = separate videos; selected = selected video

# do for all arguments on the command line
while (my $tvthek = shift)
{
    &doTVthek($tvthek);
}

exit 0;

sub doTVthek
{
    my $tvthek = shift;

    # set the HTTP Referrer
    $userAgent->default_header("Referrer" => $tvthek);

    # get the TVthek page
    my $response = $userAgent->get($tvthek);

    # extract the embedded JSON
    $response->decoded_content() =~ m/<div class="jsb_ jsb_VideoPlaylist" data-jsb="([^"]+)"/;
    my $json_string = $1;
    $json_string =~ s/&quot;/"/g;
    my $json = decode_json($json_string);

    # process the JSON
    &doJSON($json);
}

sub doJSON
{
    my $json = shift;

    # overall video title
    my $title = $json->{playlist}->{title} || die "cannot get title";

    # the video (playlist) may be split into separate jobs (files)
    my $jobs = [];

    # collect "whole" or "separate" from the playlist
    foreach my $video (@{$json->{playlist}->{videos}})
    {
        foreach my $source (@{$video->{sources}})
        {
            if ($source->{quality} eq $quality && $source->{src} =~ m/\/playlist.m3u8$/)
            {
                if ($mode eq "whole")
                {
                    # implicitly create job 0 and collect all sources
                    $jobs->[0]->{title} = $title;
                    push @{$jobs->[0]->{sources}}, $source->{src};
                }
                if ($mode eq "separate")
                {
                    # create a new job for each video
                    push @{$jobs}, {};
                    my $index = substr("00" . scalar(@{$jobs}), -2);
                    $jobs->[-1]->{title} = "$title - $index $video->{title}";
                    $jobs->[-1]->{sources}->[0] = $source->{src};
                }
            }
        }
    }

    # if "separate" but only one video, then use the short title as in "whole"
    if ($mode eq "separate" && scalar(@{$jobs}) == 1)
    {
        $jobs->[0]->{title} = $title;
    }

    # get "selected" from the selected video
    if ($mode eq "selected")
    {
        my $video = $json->{selected_video};
        foreach my $source (@{$video->{sources}})
        {
            # implicitly create job 0 with one source
            $jobs->[0]->{title} = $title . " - " . $video->{title};
            $jobs->[0]->{sources}->[0] = $source->{src};
        }
    }

    # execute the jobs
    foreach my $job (@{$jobs})
    {
        &doJob($job);
    }
}

sub doJob
{
    my $job = shift;

    # file name from job title
    my $file = "TVthek-DL_-_" . &escape_title($job->{title}) . ".ts";
    print "FILE: $file\n";
    -f $file && die "download file $file already exists";

    # open the file for writing
    open FILE, ">$file" || die "cannot open file $file";

    # download all the sources
    foreach my $source (@{$job->{sources}})
    {
        &doSource($source);
    }

    # close the file
    close FILE || die "cannot close file $file";
}

sub doSource
{
    my $source = shift;

    # get the playlist.m3u8
    my $response = $userAgent->get($source);
    my $playlist = $response->decoded_content();
    $playlist =~ m/^chunklist.m3u8$/m || die "invalid playlist; does not contain chunklist";

    # a redirect happened; get the new base URL
    my $url = $response->base();
    $url =~ s/\/[^\/]+$//;

    # get the chunklist.m3u8
    $response = $userAgent->get("$url/chunklist.m3u8");
    my $chunklist = $response->decoded_content();
    $chunklist =~ m/^media_\d+.ts$/m || die "invalid chunklist; does not contain media_*.ts";

    # get the name of the last chunk
    $chunklist =~ m/.*(media_.*?.ts)/s;
    my $last = $1;
    # and download all chunks
    while ($chunklist =~ m/^(media_.*?.ts)$/mg)
    {
        my $chunk = $1;
        print "\r$chunk / $last ";
        $response = $userAgent->get("$url/$chunk");
        print FILE $response->content();
    }
    print "\n";
}

sub escape_title
{
    my $title = shift;

    $title =~ s/ä/ae/g;
    $title =~ s/ö/oe/g;
    $title =~ s/ü/ue/g;
    $title =~ s/Ä/Ae/g;
    $title =~ s/Ö/Oe/g;
    $title =~ s/Ü/Ue/g;
    $title =~ s/ß/ss/g;
    $title =~ s/[^-_a-zA-Z0-9]/_/g;
    $title =~ s/__+/_/g;
    $title =~ s/_$//;

    return $title;
}

__END__
